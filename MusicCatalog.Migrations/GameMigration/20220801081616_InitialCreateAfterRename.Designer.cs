// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicCatalog.EFCore.Persistence;

#nullable disable

namespace MusicCatalog.Migrations.GameMigration
{
    [DbContext(typeof(GameContext))]
    [Migration("20220801081616_InitialCreateAfterRename")]
    partial class InitialCreateAfterRename
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("Gaming.Domain.Aggregates.GameAggregate.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDlc")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UniversalId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UniversalId")
                        .IsUnique()
                        .HasDatabaseName("Index_Game_WebApiLookupRef");

                    b.ToTable("Game", (string)null);
                });

            modelBuilder.Entity("Gaming.Domain.Aggregates.GameTrackAggregate.GameTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RowVersion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UniversalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VisualizedBy")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("GameTracks");
                });

            modelBuilder.Entity("Gaming.Domain.Aggregates.MusicAggregate.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Album")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Bpm")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Composer")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UniversalId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UniversalId")
                        .IsUnique()
                        .HasDatabaseName("Index_Song_WebApiLookupRef");

                    b.ToTable("Song", (string)null);
                });

            modelBuilder.Entity("Gaming.Domain.Aggregates.GameTrackAggregate.Ez2OnGameTrack", b =>
                {
                    b.HasBaseType("Gaming.Domain.Aggregates.GameTrackAggregate.GameTrack");

                    b.Property<int>("Ez2OnDbSequenceNumber")
                        .HasColumnType("INTEGER");

                    b.ToTable("Ez2OnGameTrack", (string)null);
                });

            modelBuilder.Entity("Gaming.Domain.Aggregates.GameTrackAggregate.GameTrack", b =>
                {
                    b.HasOne("Gaming.Domain.Aggregates.MusicAggregate.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Gaming.Domain.Aggregates.GameTrackAggregate.DifficultyMode", "DifficultyMode", b1 =>
                        {
                            b1.Property<int>("GameTrackId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Category")
                                .HasMaxLength(50)
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Level")
                                .HasMaxLength(5)
                                .HasColumnType("INTEGER");

                            b1.HasKey("GameTrackId");

                            b1.ToTable("GameTracks");

                            b1.WithOwner()
                                .HasForeignKey("GameTrackId");
                        });

                    b.Navigation("DifficultyMode");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Gaming.Domain.Aggregates.GameTrackAggregate.Ez2OnGameTrack", b =>
                {
                    b.HasOne("Gaming.Domain.Aggregates.GameTrackAggregate.GameTrack", null)
                        .WithOne()
                        .HasForeignKey("Gaming.Domain.Aggregates.GameTrackAggregate.Ez2OnGameTrack", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
