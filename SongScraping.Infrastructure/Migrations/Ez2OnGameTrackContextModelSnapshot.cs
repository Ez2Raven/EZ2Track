// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SongScraping.Infrastructure.Persistence;

namespace SongScraping.Infrastructure.Migrations
{
    [DbContext(typeof(Ez2OnGameTrackContext))]
    partial class Ez2OnGameTrackContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("MusicGames.Domain.AggregatesModels.GameAggregate.Game", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDlc")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("Index_Game_WebApiLookupRef");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("MusicGames.Domain.AggregatesModels.GameTrackAggregate.Ez2OnGameTrack", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Ez2OnDbSequenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<int?>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("VisualizedBy")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("Index_Ez2OnGameTrack_WebApiLookupRef");

                    b.HasIndex("SongId");

                    b.ToTable("Ez2OnGameTrack");
                });

            modelBuilder.Entity("MusicGames.Domain.AggregatesModels.MusicAggregate.Song", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Album")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Bpm")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Composer")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("Index_Song_WebApiLookupRef");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("MusicGames.Domain.AggregatesModels.GameTrackAggregate.Ez2OnGameTrack", b =>
                {
                    b.HasOne("MusicGames.Domain.AggregatesModels.MusicAggregate.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId");

                    b.OwnsOne("MusicGames.Domain.AggregatesModels.GameTrackAggregate.DifficultyMode", "DifficultyMode", b1 =>
                        {
                            b1.Property<int>("Ez2OnGameTrackId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Category")
                                .HasMaxLength(50)
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Level")
                                .HasMaxLength(5)
                                .HasColumnType("INTEGER");

                            b1.HasKey("Ez2OnGameTrackId");

                            b1.ToTable("Ez2OnGameTrack");

                            b1.WithOwner()
                                .HasForeignKey("Ez2OnGameTrackId");
                        });

                    b.Navigation("DifficultyMode");

                    b.Navigation("Song");
                });
#pragma warning restore 612, 618
        }
    }
}
